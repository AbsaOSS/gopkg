/*
Copyright 2021 Absa Group Limited

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/
package shell

import (
	"bufio"
	"fmt"
	"io"
	"os"
	"os/exec"
	"strings"
	"sync"
)

// Command is a synchronized wrapper around the standard Go command, which allows you to define environment variables
// in a native way and returns the output as a return value
type Command struct {
	Command           string            // The command to run
	Args              []string          // The args to pass to the command
	WorkingDir        string            // The working directory
	Env               map[string]string // Additional environment variables to set
	OutputMaxLineSize int               // The max line size of stdout and stderr (in bytes)
}

// Execute process the Command and returns output as output argument
func Execute(command Command) (string, error) {
	allOutput := []string{}
	err := execute(command, &allOutput, &allOutput)

	output := strings.Join(allOutput, "\n")
	return output, err
}

func execute(command Command, storedStdout *[]string, storedStderr *[]string) error {
	// #nosec G204; command line injections are evaluated by gosec
	cmd := exec.Command(command.Command, command.Args...)
	cmd.Dir = command.WorkingDir
	cmd.Stdin = os.Stdin
	cmd.Env = formatEnvVars(command)

	stdout, err := cmd.StdoutPipe()
	if err != nil {
		return err
	}

	stderr, err := cmd.StderrPipe()
	if err != nil {
		return err
	}

	err = cmd.Start()
	if err != nil {
		return err
	}

	if err := readStdoutAndStderr(stdout, stderr, storedStdout, storedStderr, 1024); err != nil {
		return err
	}

	if err := cmd.Wait(); err != nil {
		return err
	}

	return nil
}

func formatEnvVars(command Command) []string {
	env := os.Environ()
	for key, value := range command.Env {
		env = append(env, fmt.Sprintf("%s=%s", key, value))
	}
	return env
}

func readStdoutAndStderr(stdout io.ReadCloser,
	stderr io.ReadCloser,
	storedStdout *[]string,
	storedStderr *[]string,
	maxLineSize int) error {
	stdoutScanner := bufio.NewScanner(stdout)
	stderrScanner := bufio.NewScanner(stderr)

	if maxLineSize > 0 {
		stdoutScanner.Buffer(make([]byte, maxLineSize), maxLineSize)
		stderrScanner.Buffer(make([]byte, maxLineSize), maxLineSize)
	}

	wg := &sync.WaitGroup{}
	mutex := &sync.Mutex{}
	wg.Add(2)
	go readData(stdoutScanner, wg, mutex, storedStdout)
	go readData(stderrScanner, wg, mutex, storedStderr)
	wg.Wait()

	if err := stdoutScanner.Err(); err != nil {
		return err
	}

	if err := stderrScanner.Err(); err != nil {
		return err
	}

	return nil
}

func readData(scanner *bufio.Scanner, wg *sync.WaitGroup, mutex *sync.Mutex, allOutput *[]string) {
	defer wg.Done()
	for scanner.Scan() {
		logTextAndAppendToOutput(mutex, scanner.Text(), allOutput)
	}
}

func logTextAndAppendToOutput(mutex *sync.Mutex, text string, allOutput *[]string) {
	defer mutex.Unlock()
	mutex.Lock()
	*allOutput = append(*allOutput, text)
}
