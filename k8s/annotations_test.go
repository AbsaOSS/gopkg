/*
Copyright 2021 Absa Group Limited

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/
package k8s

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"k8s.io/api/extensions/v1beta1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

func TestAddNewAnnotations(t *testing.T) {
	// arrange
	target, source := provideIngresses()
	// act
	MergeAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.Equal(t, 3, len(target.ObjectMeta.Annotations))
	assert.Equal(t, "eu", target.ObjectMeta.Annotations["k8gb.io/primary-geotag"])
	assert.Equal(t, "dummy", target.ObjectMeta.Annotations["field.cattle.io/publicEndpoints"])
}

func TestAddExistingAnnotations(t *testing.T) {
	// arrange
	target, source := provideIngresses()
	for k, v := range source.Annotations {
		target.Annotations[k] = v
	}
	// act
	MergeAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.Equal(t, 3, len(target.ObjectMeta.Annotations))
	assert.Equal(t, "eu", target.ObjectMeta.Annotations["k8gb.io/primary-geotag"])
	assert.Equal(t, "dummy", target.ObjectMeta.Annotations["field.cattle.io/publicEndpoints"])
	assert.Equal(t, "failover", target.ObjectMeta.Annotations["k8gb.io/strategy"])
}

func TestUpdateExistingRecords(t *testing.T) {
	// arrange
	target, source := provideIngresses()
	for k, v := range source.Annotations {
		target.Annotations[k] = v
	}
	target.Annotations["k8gb.io/primary-geotag"] = "us"
	// act
	MergeAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.Equal(t, 3, len(target.ObjectMeta.Annotations))
	assert.Equal(t, "us", target.ObjectMeta.Annotations["k8gb.io/primary-geotag"])
	assert.Equal(t, "dummy", target.ObjectMeta.Annotations["field.cattle.io/publicEndpoints"])
	assert.Equal(t, "failover", target.ObjectMeta.Annotations["k8gb.io/strategy"])
}

func TestEqualAnnotationsWithEmptyTarget(t *testing.T) {
	// arrange
	_, source := provideIngresses()
	target := &v1beta1.Ingress{}
	// act
	MergeAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.True(t, assert.ObjectsAreEqual(source.Annotations, target.ObjectMeta.Annotations))
}

func TestEqualAnnotationsWithEmptySource(t *testing.T) {
	// arrange
	target, _ := provideIngresses()
	source := &v1beta1.Ingress{}
	// act
	MergeAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.True(t, assert.ObjectsAreEqual(target.Annotations, target.ObjectMeta.Annotations))
}

func TestEqualAnnotationsWithEmptyInput(t *testing.T) {
	// arrange
	source := &v1beta1.Ingress{}
	target := &v1beta1.Ingress{}
	// act
	MergeAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.Equal(t, 0, len(target.ObjectMeta.Annotations))
}

func TestContainsAllAnnotations(t *testing.T) {
	// arrange
	source, target := provideIngresses()
	metav1.SetMetaDataAnnotation(&target.ObjectMeta, "k8gb.io/primary-geotag", "eu")
	metav1.SetMetaDataAnnotation(&target.ObjectMeta, "k8gb.io/strategy", "failover")
	// act
	result := ContainsAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.True(t, result)
}

func TestContainsSomeAnnotations(t *testing.T) {
	// arrange
	source, target := provideIngresses()
	metav1.SetMetaDataAnnotation(&target.ObjectMeta, "k8gb.io/primary-geotag", "eu")
	// act
	result := ContainsAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.False(t, result)
}

func TestContainsAnnotationsWithDifferentValues(t *testing.T) {
	// arrange
	source, target := provideIngresses()
	// act
	result := ContainsAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.False(t, result)
}

func TestContainsSourceIsEmpty(t *testing.T) {
	// arrange
	_, target := provideIngresses()
	source := &v1beta1.Ingress{}
	// act
	result := ContainsAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.True(t, result)
}

func TestContainsTargetIsEmpty(t *testing.T) {
	// arrange
	source, _ := provideIngresses()
	target := &v1beta1.Ingress{}
	// act
	result := ContainsAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.False(t, result)
}

func TestContainsEmptyInputs(t *testing.T) {
	// arrange
	source := &v1beta1.Ingress{}
	target := &v1beta1.Ingress{}
	// act
	result := ContainsAnnotations(&target.ObjectMeta, &source.ObjectMeta)
	// assert
	assert.True(t, result)
}

func provideIngresses() (isource *v1beta1.Ingress, itarget *v1beta1.Ingress) {
	source := map[string]string{"k8gb.io/primary-geotag": "eu", "k8gb.io/strategy": "failover"}
	target := map[string]string{"field.cattle.io/publicEndpoints": "dummy"}
	isource = &v1beta1.Ingress{}
	itarget = &v1beta1.Ingress{}
	isource.Annotations = source
	itarget.Annotations = target
	return
}
